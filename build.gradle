plugins {
    id "java"
    id "idea"
    id "eclipse"
    id "edu.wpi.first.GradleRIO" version "2021.3.1"
    id "com.diffplug.spotless" version "5.8.2"
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

def ROBOT_MAIN_CLASS = "com.team1816.frc2020.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Maven central needed for JUnit
repositories {
    mavenCentral()
    maven { url "https://www.jitpack.io" }
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.deps.wpilib()
    implementation wpi.deps.vendor.java()

    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)

    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    implementation "com.github.dominikwin:badlog:v0.1.1"
    implementation 'org.yaml:snakeyaml:1.23'
    implementation 'gov.nist.math:jama:1.0.3'

    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
    simulation wpi.deps.sim.driverstation(wpi.platforms.desktop, false)

    testImplementation 'org.mockito:mockito-core:3.6.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest:2.1'
}

spotless {
    java {
        target 'src/*/java/com/team1816/**/*.java'
        importOrder()
        removeUnusedImports()
        prettier(['prettier': '2.2.1', 'prettier-plugin-java': '1.0.1'])
            .config([
                'parser': 'java',
                'tabWidth': 4,
                'printWidth': 90
            ])
        trimTrailingWhitespace()
        endWithNewline()
    }
}

test {
    useJUnit() // Use JUnit for ./gradlew test task
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

processResources {
    include '**/*.config.yml'
    eachFile { fileCopyDetails ->

    }
}

task run(type: JavaExec) {
    String jniDir = "${project.buildDir}/tmp/jniExtractDir"
    environment "PATH", jniDir
    String hal = fileTree(dir: "${project.buildDir}/tmp/expandedArchives", include: 'halsim*/**/*.*').asPath
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        environment "LD_LIBRARY_PATH", jniDir
        environment "DYLD_FALLBACK_LIBRARY_PATH", jniDir
        environment "DYLD_LIBRARY_PATH", jniDir
    }
    environment "HALSIM_EXTENSIONS", hal
    environment "ROBOT_NAME", "zodiac_swerve"
    dependsOn(jar, simulateExternalJava)
    classpath = files(jar)
    jvmArgs "-Djava.library.path=${jniDir}"
}

wrapper {
    gradleVersion = '6.7.1'
}

//tasks.create('deployVision') {
//    println "Deploying ZodiacVision..."
//    // TODO: Develop deployVision task
//}
//
//tasks.named('deploy').configure {
//    dependsOn tasks.named('deployVision')
//}
