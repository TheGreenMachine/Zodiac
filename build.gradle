import edu.wpi.first.gradlerio.deploy.roborio.RoboRIO
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2022.1.1"
    id 'org.jsonschema2dataclass' version '4.0.1'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "com.team1816.frc2020.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)
            checkImage = false
            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://www.jitpack.io" }
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    implementation "com.github.dominikwin:badlog:v0.1.1"
    implementation 'org.yaml:snakeyaml:1.23'
    implementation 'gov.nist.math:jama:1.0.3'
    implementation 'com.google.inject:guice:5.0.1'
    implementation 'com.google.inject.extensions:guice-assistedinject:5.0.1'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:3.6.0'
    testImplementation 'org.hamcrest:hamcrest:2.1'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled.set(true)
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

jsonSchema2Pojo {
    targetPackage = 'com.team1816.lib.hardware'
    useTitleAsClassname = true
    includeGetters = false
    includeSetters = false
    removeOldOutput = true
    includeAdditionalProperties = false
    includeToString = true
    includeHashcodeAndEquals = false
    source.setFrom files(
        "${project.rootDir}/src/main/resources/subsystemconfig.schema.json",
        "${project.rootDir}/src/main/resources/pidconfig.schema.json",
        "${project.rootDir}/src/main/resources/swervemoduleconfig.schema.json",
        "${project.rootDir}/src/main/resources/moduleconfig.schema.json",
        "${project.rootDir}/src/main/resources/double.solenoid.schema.json",
        "${project.rootDir}/src/main/resources/robotconfig.schema.json"
    )}

task runAlpha(type: JavaExec) {
    String jniDir = "${project.buildDir}/jni/release"
    environment "PATH", jniDir
    String hal = fileTree(dir: "${project.buildDir}/jni/release", include: '*halsim_*.*').asPath
    if (!DefaultNativePlatform.currentOperatingSystem.isWindows()) {
        environment "LD_LIBRARY_PATH", jniDir
        environment "DYLD_FALLBACK_LIBRARY_PATH", jniDir
        environment "DYLD_LIBRARY_PATH", jniDir
    }
    environment "HALSIM_EXTENSIONS", hal
    environment "ROBOT_NAME", "alpha"
    dependsOn(jar, simulateJavaRelease)
    classpath = files(jar)
    jvmArgs "-Djava.library.path=${jniDir}"
}

task runSwerve(type: JavaExec) {
    String jniDir = "${project.buildDir}/jni/release"
    environment "PATH", jniDir
    String hal = fileTree(dir: "${project.buildDir}/jni/release", include: '*halsim_*.*').asPath
    if (!DefaultNativePlatform.currentOperatingSystem.isWindows()) {
        environment "LD_LIBRARY_PATH", jniDir
        environment "DYLD_FALLBACK_LIBRARY_PATH", jniDir
        environment "DYLD_LIBRARY_PATH", jniDir
    }
    environment "HALSIM_EXTENSIONS", hal
    environment "ROBOT_NAME", "zodiac_swerve"
    dependsOn(jar, simulateJavaRelease)
    classpath = files(jar)
    jvmArgs "-Djava.library.path=${jniDir}"
}

task runTank(type: JavaExec) {
    String jniDir = "${project.buildDir}/jni/release"
    environment "PATH", jniDir
    String hal = fileTree(dir: "${project.buildDir}/jni/release", include: '*halsim_*.*').asPath
    if (!DefaultNativePlatform.currentOperatingSystem.isWindows()) {
        environment "LD_LIBRARY_PATH", jniDir
        environment "DYLD_FALLBACK_LIBRARY_PATH", jniDir
        environment "DYLD_LIBRARY_PATH", jniDir
    }
    environment "HALSIM_EXTENSIONS", hal
    environment "ROBOT_NAME", "zodiac_pro"
    dependsOn(jar, simulateJavaRelease)
    classpath = files(jar)
    jvmArgs "-Djava.library.path=${jniDir}"
}

processResources {
    include '**/*.config.yml'
    eachFile { fileCopyDetails ->
    }
}

wrapper {
    gradleVersion = '7.2'
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)








//tasks.create('deployVision') {
//    println "Deploying ZodiacVision..."
//    // TODO: Develop deployVision task
//}
//
//tasks.named('deploy').configure {
//    dependsOn tasks.named('deployVision')
//}
